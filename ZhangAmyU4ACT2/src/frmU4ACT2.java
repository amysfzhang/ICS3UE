/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Amy Zhang
 * Date: August 18, 2023
 * Calculates the factorial, checks if it is prime, or outputs the Fibonacci term of user's input
 */
public class frmU4ACT2 extends javax.swing.JFrame {

    /**
     * 
     * @param intNum is a positive integer > 0
     * @return an integer which is the factorial of intNum 
     */
    public static int getFactorial(int intNum){
        //Declares a variable to multiply to and store the facrotial
        int intFactorial = 1;
        //loops through each number from 1 (inclusive) to intNum (inclusive)
        for (int i = 1; i <= intNum; i++){
            //Multiplies each number to intFactorial and stores as intFacorial
            intFactorial *= i;
        }
        //Returns the value after multiplying it by every positive integer before intNum
        return intFactorial;
    }
    
    /**
     * 
     * @param intNum is a positive integer > 0
     * @return true/false if intNum is prime
     */
    public static String checkPrime(int intNum){
        //Checks if the input is 1 (special case)
        if (intNum == 1)
        {
            //Returns no because prime numbers have two factors, but 1 only has one
            return "No";
        }

        //Goes through each number between 1 [exclusive] and inNum [exclusive]
        for (int i = 2; i <= Math.sqrt(intNum); i++){
            //If the modulus division results in no remainders (i is a factor)
            if (intNum % i == 0){
                //intNum has at least 1 factor aside from itself and 1, thus is not prime
                return "No";
            }
        }
        //Only returns yes if no numbers between 1 and intNum is a factor of intNum, thus intNum is prime
        return "Yes";
    }
    
    /**
     * 
     * @param intNum is a positive integer > 0
     * @return an integer which is the term in the Fibonacci sequence corresponding to intNum
     */
    public static int getFibonacciTerm(int intNum){
        //Declaring and storing the total of the past two terms
        int intCurrent = 0;
        //Declaring and storing the term previous to the current
        int intPrevious1 = 0;
        //Declaring and storing the term previous the previous term
        int intPrevious2 = 1;
        //Looping through intNum number of times
        for (int i = 1; i < intNum; i++){
            //Adds the previous integer and the previous previous integer (xn = xn-1 + xn-2)
            intCurrent = intPrevious1 + intPrevious2;
            //Updates the previous previous integer to the next value
            intPrevious2 = intPrevious1;
            //Updates the previous integer to the current one (total of previous and previous previous)
            intPrevious1 = intCurrent;
        }
        //Returns the total of the previous two terms, UNLESS intNum == 1 where it returns 0 (current)
        return intCurrent;                    
    }
    
    /**
     * Creates new form frmU4ACT2
     */
    public frmU4ACT2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblFactorialInstruction = new javax.swing.JLabel();
        lblPrimeInstrcution = new javax.swing.JLabel();
        lblFibonacciInstruction = new javax.swing.JLabel();
        txtFactorialInput = new javax.swing.JTextField();
        txtFibonacciInput = new javax.swing.JTextField();
        txtPrimeInput = new javax.swing.JTextField();
        btnPrime = new javax.swing.JButton();
        btnFactorial = new javax.swing.JButton();
        btnFibonacci = new javax.swing.JButton();
        lblFactorialOutput = new javax.swing.JLabel();
        lblPrimeOutput = new javax.swing.JLabel();
        lblFibonacciOutput = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setText("--NUMBERS--");

        lblFactorialInstruction.setText("Enter a positive integer and click the button to find the factorial:");

        lblPrimeInstrcution.setText("Enter a positive integer and click the button to determine whether or not it is a prime number:");

        lblFibonacciInstruction.setText("Enter a positive integer and click the button to see the corresponding Fibonacci number:");

        btnPrime.setText("Prime");
        btnPrime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeActionPerformed(evt);
            }
        });

        btnFactorial.setText("Factorial");
        btnFactorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFactorialActionPerformed(evt);
            }
        });

        btnFibonacci.setText("Fibonacci");
        btnFibonacci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFibonacciActionPerformed(evt);
            }
        });

        lblFactorialOutput.setText("...");

        lblPrimeOutput.setText("...");

        lblFibonacciOutput.setText("...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblPrimeInstrcution, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblFibonacciInstruction))
                            .addComponent(lblFactorialInstruction)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPrimeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(147, 147, 147)
                                        .addComponent(btnPrime)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblPrimeOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFibonacciInput, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(147, 147, 147)
                                        .addComponent(btnFibonacci)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblFibonacciOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(txtFactorialInput, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)
                        .addComponent(btnFactorial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblFactorialOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 280, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(280, 280, 280))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblTitle)
                .addGap(35, 35, 35)
                .addComponent(lblFactorialInstruction)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFactorialInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFactorial)
                    .addComponent(lblFactorialOutput))
                .addGap(30, 30, 30)
                .addComponent(lblPrimeInstrcution)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrimeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrime)
                    .addComponent(lblPrimeOutput))
                .addGap(30, 30, 30)
                .addComponent(lblFibonacciInstruction)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFibonacciInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFibonacci)
                    .addComponent(lblFibonacciOutput))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFactorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFactorialActionPerformed
        //Checking if the value entered is an integer
        try{
            //Reads and stores the user's input in textbox
            int intInput = Integer.parseInt(txtFactorialInput.getText());
            //Checks if the input is positive or 0
            if (intInput < 0) 
            {
                //Displays a message that tells the user the input isn't positive
                lblFactorialOutput.setText("Sorry, " + txtFactorialInput.getText() + " is not a positive integer");
            }
            //If the input is valid
            else
            {
                //Calls and displays the return of the method getFactorial
                lblFactorialOutput.setText(String.valueOf(getFactorial(intInput)));
            }
        }
        //Runs if the input is not an integer
        catch(NumberFormatException e)
        {
            //Displays a message that tells the user the input isn't an integer
            lblFactorialOutput.setText("Sorry, " + txtFactorialInput.getText() + " is not an integer");
        }
        
    }//GEN-LAST:event_btnFactorialActionPerformed

    private void btnPrimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeActionPerformed
        //Checking if the value entered is an integer
        try{
            //Reads and stores the user's input in textbox
            int intInput = Integer.parseInt(txtPrimeInput.getText());
            //Checks if the input is positive
            if (intInput <= 0) 
            {
                //Displays a message that tells the user the input isn't positive
                lblPrimeOutput.setText("Sorry, " + txtPrimeInput.getText() + " is not a positive integer");
            }
            //If the input is valid
            else
            {
                //Calls and displays the return of the method checkPrime
                lblPrimeOutput.setText(String.valueOf(checkPrime(intInput)));
            }
        }
        //Runs if the input is not an integer
        catch(NumberFormatException e)
        {
            //Displays a message that tells the user the input isn't an integer
            lblPrimeOutput.setText("Sorry, " + txtPrimeInput.getText() + " is not an integer");
        }     
        
    }//GEN-LAST:event_btnPrimeActionPerformed

    private void btnFibonacciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFibonacciActionPerformed
        //Checking if the value entered is an integer
        try{
            //Reads and stores the user's input in textbox
            int intInput = Integer.parseInt(txtFibonacciInput.getText());
            //Checks if the input is positive
            if (intInput <= 0) 
            {
                //Displays a message that tells the user the input isn't positive
                lblFibonacciOutput.setText("Sorry, " + txtFibonacciInput.getText() + " is not a positive integer");
            }
            //If the input is valid
            else
            {
                //Calls and displays the return of the method getFibonacciTerm
                lblFibonacciOutput.setText(String.valueOf(getFibonacciTerm(intInput)));
            }
        }
        //Runs if the input is not an integer
        catch(NumberFormatException e)
        {
            //Displays a message that tells the user the input isn't an integer
            lblFibonacciOutput.setText("Sorry, " + txtFibonacciInput.getText() + " is not an integer");
        }           
        
    }//GEN-LAST:event_btnFibonacciActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmU4ACT2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmU4ACT2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmU4ACT2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmU4ACT2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmU4ACT2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFactorial;
    private javax.swing.JButton btnFibonacci;
    private javax.swing.JButton btnPrime;
    private javax.swing.JLabel lblFactorialInstruction;
    private javax.swing.JLabel lblFactorialOutput;
    private javax.swing.JLabel lblFibonacciInstruction;
    private javax.swing.JLabel lblFibonacciOutput;
    private javax.swing.JLabel lblPrimeInstrcution;
    private javax.swing.JLabel lblPrimeOutput;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFactorialInput;
    private javax.swing.JTextField txtFibonacciInput;
    private javax.swing.JTextField txtPrimeInput;
    // End of variables declaration//GEN-END:variables
}
