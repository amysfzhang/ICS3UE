/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.text.DecimalFormat;//Importing DecimalFormat to help with rounding
/**
 *
 * @author Amy Zhang
 * Date: August 21th, 2023
 * Calculates the calories and cost for lunch items selected
 */
public class frmLunch extends javax.swing.JFrame {
    //Declaring a string array that stores the names of food items eaten at home during lunch
    final String [] STRHOMEITEMSARR = {"Rice", "Instant Noodle", "Dumpling", "Shrimp", "Broccoli", "Tuna Sandwich"};
    //Declaring a string array that stores the names of food items eaten at a store during lunch
    final String [] STRSTOREITEMSARR = {"Pizza", "BBQ Chicken", "Lo Mein", "Japanese Curry", "Burger", "Sushi"};
    
    //Declaring an integer array that stores the calories of food items eaten at home during lunch
    final int [] INTHOMECALSARR = {420, 462, 814, 448, 60, 440};
    //Declaring an integer array that stores the calories of food items eaten at a store during lunch
    final int [] INTSTORECALSARR = {290, 320, 660, 891, 530 ,698};
    
    //Declaring a double array that stores the price of food items eaten at home during lunch
    final double [] DBLHOMEPRICEARR = {1.49, 0.79, 3.50, 4.99, 2.99, 1.52};
    //Declaring a double array that stores the price of food items eaten at a store during lunch
    final double [] DBLSTOREPRICEARR = {3.95, 5.99, 4.99, 7.88, 7.19, 8.99};
    
    //Declaring a string array that stores the paths to the images of food items eaten at home during lunch
    final String [] STRHOMEIMAGEARR = {"/imageRice.png", "/imageInstantNoodle.png", "/imageDumpling.png", "/imageShrimp.png", "/imageBroccoli.png", "/imageTunaSandwich.png"};
    //Declaring a string array that stores the paths to the images of food items eaten at a store during lunch
    final String [] STRSTOREIMAGEARR = {"/imagePizza.png", "/imageBbqChicken.png", "/imageLoMein.png", "/imageJapaneseCurry.png", "/imageBurger.png", "/imageSushi.png"};
    
    //Declaring an integer araay to store the quantity of items each row contains (instead of reading the values from the table)
    int [] intQuantityArr = {0, 0, 0, 0, 0, 0, 0};
    
    // Declaring a variable to store the style that is selected
    //-1 is not set, 0 is store, 1 is home
    int intSelectedStyle = -1;
    //Declaring a variable to store the index of the item in the list that is selected
    //-1 is none selected, 0-6 is the index selected
    int intSelectedItem = -1;
    
    
    /**
     * 
     * @param dblSubtotal is a positive number > 0
     * @return a double that is dblSubtotal  multiplied by the tax rate in Ontario
     */
    public static double getTaxedTotal(double dblSubtotal){
        //Calculates the subtotal by multiplying it by 1.13
        double dblTotal = dblSubtotal * 1.13;
        //rounds and returns the total to 2 decimal places
        return Math.round(100 * dblTotal) / 100.00;
    }
    
    /**
     * 
     * @param intArray is an integer array with integers >= 0
     * @return an integer that is the sum of all elements in the array
     */
    public static int getArraySum(int [] intArray){
        //Declares a variable to store the sum of the elements in the array
        int intSum = 0;
        //Loops through each element in the array
        for (int i = 0; i < intArray.length; i++)
        {
            //Adds the element to the ongoing total
            intSum += intArray[i];
        }    
        //Returns the total at the end
        return intSum;
    }
    
    /**
     * Creates new form frmLunch
     */
    public frmLunch() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroupStyle = new javax.swing.ButtonGroup();
        jScrollBar1 = new javax.swing.JScrollBar();
        spinnerQuantity = new javax.swing.JSpinner();
        btnAdd = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableShoppingCart = new javax.swing.JTable();
        separatorShoppingCart = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        listLunch = new javax.swing.JList<>();
        radioButtonStore = new javax.swing.JRadioButton();
        radioButtonHome = new javax.swing.JRadioButton();
        lblFeedback = new javax.swing.JLabel();
        lblSelection = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblShoppingCart = new javax.swing.JLabel();
        lblCalorie = new javax.swing.JLabel();
        lblSelectionInfo = new javax.swing.JLabel();
        lblAboutItem = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblShoppingCartInfo = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageDefault.png"))); // NOI18N
        lblImage.setToolTipText("");
        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblPrice.setText("Price: ");

        tableShoppingCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {" ", null, null, null},
                {" ", null, null, null},
                {" ", null, null, null},
                {" ", null, null, null},
                {" ", null, null, null},
                {" ", null, null, null},
                {" ", null, null, null},
                {null, null, null, null},
                {"Subtotal", null,  new Double(0.0), null},
                {"Total",  new Integer(0),  new Double(0.0),  new Integer(0)}
            },
            new String [] {
                "Item", "Qty", "Cost ($)", "Calorie"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableShoppingCart.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableShoppingCart.setEnabled(false);
        tableShoppingCart.setShowVerticalLines(true);
        tableShoppingCart.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableShoppingCart);
        if (tableShoppingCart.getColumnModel().getColumnCount() > 0) {
            tableShoppingCart.getColumnModel().getColumn(0).setPreferredWidth(150);
            tableShoppingCart.getColumnModel().getColumn(1).setPreferredWidth(50);
            tableShoppingCart.getColumnModel().getColumn(2).setPreferredWidth(120);
        }

        separatorShoppingCart.setOrientation(javax.swing.SwingConstants.VERTICAL);

        listLunch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listLunch.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listLunchValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listLunch);

        buttonGroupStyle.add(radioButtonStore);
        radioButtonStore.setText("Store Bought");
        radioButtonStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonStoreActionPerformed(evt);
            }
        });

        buttonGroupStyle.add(radioButtonHome);
        radioButtonHome.setText("At Home");
        radioButtonHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonHomeActionPerformed(evt);
            }
        });

        lblFeedback.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        lblFeedback.setForeground(new java.awt.Color(255, 0, 51));

        lblSelection.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSelection.setText("Selection");

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle.setText("Lunch Cost and Calories");

        lblShoppingCart.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblShoppingCart.setText("Shopping Cart");

        lblCalorie.setText("Calorie: ");

        lblSelectionInfo.setText("Click on the item to learn more");

        lblAboutItem.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblAboutItem.setText("About Item");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblShoppingCartInfo.setText("Drag header border to resize if text is hidden");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(226, 226, 226)
                        .addComponent(lblTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioButtonStore, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioButtonHome, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                            .addComponent(lblSelectionInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(lblSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(lblAboutItem, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblCalorie, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(41, 41, 41))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(spinnerQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(separatorShoppingCart, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(82, 82, 82)
                                        .addComponent(lblShoppingCart))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(21, 21, 21))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(lblShoppingCartInfo)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addComponent(btnBack))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblShoppingCart)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(lblShoppingCartInfo)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(separatorShoppingCart, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblSelection)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(radioButtonHome, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(radioButtonStore)
                                .addComponent(lblAboutItem))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lblSelectionInfo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(12, 12, 12)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addComponent(spinnerQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblFeedback)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCalorie)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Creating a listModel that can be used in each button method to display in listLunch
    javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();

    private void listLunchValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listLunchValueChanged
        //Declaring the decimal format to be two places
        DecimalFormat df2 = new DecimalFormat("0.00");
        //Getting the index of the item selected on the list and storing it in intSelectedItem
        intSelectedItem = listLunch.getSelectedIndex();
        //Checks if there is an item selected (-1 = no item selected)
        
        if (intSelectedItem != -1)
        {
            //Swtiches directly to two different cases depending on the style that was selected (1 = home, 0 = store)
            switch(intSelectedStyle)
            {   
                //Runs where the style selected is store
                case 0:
                    //Displays the image to the appropriate one for the item selected (getClass gets a unique class for the image)
                    lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(STRSTOREIMAGEARR[intSelectedItem])));
                    //Displays the price of the item rounded to two decimal places
                    lblPrice.setText("Price: $" + df2.format(DBLSTOREPRICEARR[intSelectedItem]));
                    //Displays the calorie of the item
                    lblCalorie.setText("Calorie: " + INTSTORECALSARR[intSelectedItem]);
                    break;//Ends, avoid fall-through
                
                //Runs where the style selected is home
                case 1:
                    //Displays the image to the appropriate one for the item selected (getClass gets a unique class for the image)
                    lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(STRHOMEIMAGEARR[intSelectedItem])));
                    //Displays the price of the item rounded to two decimal places
                    lblPrice.setText("Price: $" + df2.format(DBLHOMEPRICEARR[intSelectedItem]));
                    //Displays the calorie of the item
                    lblCalorie.setText("Calorie: " + INTHOMECALSARR[intSelectedItem]);
                    break;//Ends, avoid fall-through
            }
        }
    }//GEN-LAST:event_listLunchValueChanged

    private void radioButtonStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonStoreActionPerformed
        //Sets the variable that keeps track of the current style to 0 (store)
        intSelectedStyle = 0;

        //Removes all the items in the list model
        listModel.removeAllElements();
        //loops through each item in STRSTOREITEMSARR which contains all the names of the items at store
        for (int i = 0; i < STRSTOREITEMSARR.length; i++)
        {
            //adds the element (name of item) in a new row
            listModel.insertElementAt(STRSTOREITEMSARR[i], i);
        }
        //Displays the listmodel in the Jlist listLunch
        listLunch.setModel(listModel);
        
    }//GEN-LAST:event_radioButtonStoreActionPerformed

    private void radioButtonHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonHomeActionPerformed
        //Sets the variable that keeps track of the current style to 1 (home)
        intSelectedStyle = 1;
        
        //Removes all the items in the list model
        listModel.removeAllElements();
        //loops through each item in STRSTOREITEMSARR which contains all the names of the items at store
        for (int i = 0; i < STRHOMEITEMSARR.length; i++)
        {
            //adds the element (name of item) in a new row            
            listModel.addElement(STRHOMEITEMSARR[i]);
        }
        //Displays the listmodel in the Jlist listLunch
        listLunch.setModel(listModel);
    }//GEN-LAST:event_radioButtonHomeActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //Displaying an empty string to clear any errors previously raised
        lblFeedback.setText("");
        
        //Getting the tableModel of our JTable that can be modified 
        javax.swing.table.TableModel tableModel = tableShoppingCart.getModel();
        //Reading the value inside the spinner and storign it in a string (any value can be stringed)
        String strQuantity = String.valueOf(spinnerQuantity.getValue());
        //Declaring a variable to store the quantity of items added by the user
        int intQuantityAdded = 0;
        //Declaring a boolean variable to store whether or not the input is an integer
        boolean isErrorRaised = false;
        
        //FIRST VALIDATION: checking if input is a postive integer 
        //Checks if an item is selected from the list (-1 = no item selected)
        if (listLunch.getSelectedIndex() == -1)
        {
            //Displays a error message to the user informing them that no item has been selected
            lblFeedback.setText("No item selected");
            //Sets the value of an error raised to true, other parts will not run
            isErrorRaised = true;
        }
        //If there is an item selected from the list
        else
        {
            //Checks the quantity given is an integer
            try
            {
                //tries to convert the string into an integer
                intQuantityAdded = Integer.parseInt(strQuantity);
                //Checks if the quantity is bigger than 0 (positive integer)
                if(intQuantityAdded <= 0)
                {
                    //Displays a error message to the user informing them that the the quantity is either 0 or negative 
                    lblFeedback.setText("Quantity not positive");
                    //Sets the value of an error raised to true, other parts will not run
                    isErrorRaised = true;
                }
                //Checks if the quantity is bigger than 30
                if(intQuantityAdded > 30)
                {
                    //Displays a error message to the user informing them that their quantity is over 30
                    lblFeedback.setText("Max 30, quantity too large");
                    //Sets the value of an error raised to true, other parts will not run
                    isErrorRaised = true;
                    
                }
            }
            //Catches the error if the input is not an integer
            catch(NumberFormatException e)
            {
                //Displays a error message to the user informing them that the input was not an integer
                lblFeedback.setText("Not an integer");
                //Sets the value of an error raised to true, other parts will not run
                isErrorRaised = true;
            }
        }
        
        
        //SECOND VALIDATION: checking the table for an avaiable row + if repeated, over 30?
        //Declaring two variables to keep track of if the item is added to an already existing row or to a new row
        boolean isItemRepeat = false, isRowEmpty = false;
        //Declaring a variabel to keep track of which row the item is added to
        int intSelectedRow = 0;
        //Declaring a variable to store the total quantity of an item (additional + original)
        int intItemQuantity = intQuantityAdded;
        
        //Checking if no errors were raised in part 1 of validating the input
        if (!isErrorRaised)
        { 
            //Goes through each row (7 total) in the table until either there is a row with the same item or new row available
            while (!isItemRepeat && !isRowEmpty && intSelectedRow < 7){
                //Checks if the item of the row is equal to the items selected in the Jlist
                if (tableModel.getValueAt(intSelectedRow, 0).equals(listLunch.getSelectedValue()))
                {
                    //There is a row that has the same item, stops the while loop
                    isItemRepeat = true;
                }
                //Checks if the row in the table model is empty
                else if (tableModel.getValueAt(intSelectedRow, 0).equals(" "))
                {
                    //There is a row available, stops the while loop
                    isRowEmpty = true;
                }
                //If the row is not the same item and not empty
                else
                {    
                    //Increases the row counter by 1
                    intSelectedRow++;
                }
            }
            
            //Runs if no rows are available
            if (!isRowEmpty && !isItemRepeat)
            {
                //Displays a error message to the user informing them that no rows available
                lblFeedback.setText("Max 7, no rows available");
                //Sets the value of an error raised to true, other parts will not run
                isErrorRaised = true;
            }
            //Runs if the item is repeated
            else if (isItemRepeat)
            {   
                //Adds the original quantity count in the table of the item to the new amount
                intItemQuantity += (int) tableModel.getValueAt(intSelectedRow, 1);

                //Checking if the total quantity of the item excedes 30
                if (intItemQuantity > 30)
                {
                    //Displays a error message to the user informing them that their quantity is over 30
                    lblFeedback.setText("Max 30, quantity too large");
                    //Sets the value of an error raised to true, other parts will not run
                    isErrorRaised = true;
                }
                //Runs if the total quantity is valid (under 30)
                else
                {
                    //Sets the corresponding element in the array to the total quantity of the item in total
                    intQuantityArr[intSelectedRow] = intItemQuantity;                    
                }
            }
            //Runs if a row is available (isRowEmpty)
            else
            {          
                //Sets the corresponding element in the array to the quantity of the item added
                intQuantityArr[intSelectedRow] = intQuantityAdded;
            }
        }
        
        
        //DISPLAYING IN TABLE
        //Declaring a variable to store the subtotal
        double dblSubtotal;
        //Declaring a variable to store the total amount of calories
        int intTotalCals;  
        
        //Only runs if the earlier two parts didn't produce errors
        if (!isErrorRaised)
        {        
            //Checks if the stype is Store
            if (intSelectedStyle == 0)
            {
                //Displays the name of the item in the first column
                tableModel.setValueAt(STRSTOREITEMSARR[intSelectedItem], intSelectedRow, 0);
                //Displays the quantity of the item in the second column
                tableModel.setValueAt(intItemQuantity, intSelectedRow, 1);
                //Displays the cost of the total amount of item in the third column
                tableModel.setValueAt(intItemQuantity*DBLSTOREPRICEARR[intSelectedItem], intSelectedRow, 2);
                //Displays the total amount of calories of the item in the fourth column
                tableModel.setValueAt(intItemQuantity*INTSTORECALSARR[intSelectedItem], intSelectedRow, 3);
                
                //Store the subtotal as the quantity added multiplied by the item's price and added to the current total on the table                         
                dblSubtotal = (double)intQuantityAdded * DBLSTOREPRICEARR[intSelectedItem] + Double.parseDouble(String.valueOf(tableModel.getValueAt(8, 2)));                         
                //Store the total Calories as the quantity added multiplied by the item's calorie and added to the current total on the table
                intTotalCals = intQuantityAdded * INTSTORECALSARR[intSelectedItem] + (int)tableModel.getValueAt(9, 3);                   
            }
            //Runs if the style is Home
            else
            {
                //Displays the name of the item in the first column                
                tableModel.setValueAt(STRHOMEITEMSARR[intSelectedItem], intSelectedRow, 0);
                //Displays the quantity of the item in the second column
                tableModel.setValueAt(intItemQuantity, intSelectedRow, 1);
                //Displays the cost of the total amount of item in the third column
                tableModel.setValueAt(intItemQuantity*DBLHOMEPRICEARR[intSelectedItem], intSelectedRow, 2);
                //Displays the total amount of calories of the item in the fourth column
                tableModel.setValueAt(intItemQuantity*INTHOMECALSARR[intSelectedItem], intSelectedRow, 3);
                
                //Store the subtotal as the quantity added multiplied by the item's price and added to the current total on the table                         
                dblSubtotal = (double)intQuantityAdded * DBLHOMEPRICEARR[intSelectedItem] + Double.parseDouble(String.valueOf(tableModel.getValueAt(8, 2)));
                //Store the total Calories as the quantity added multiplied by the item's calorie and added to the current total on the table                
                intTotalCals = intQuantityAdded * INTHOMECALSARR[intSelectedItem] + (int)tableModel.getValueAt(9, 3);
            }
            
            //Displays the subTotal in the appropriate row, column
            tableModel.setValueAt(dblSubtotal, 8, 2);                    
            //Calls the method getArraySum and displays the sum of the total quantities in the table
            tableModel.setValueAt(getArraySum(intQuantityArr), 9, 1);
            //Calls a method to calculate the taxed total of the subtotal and displays it in the appropriate row, column
            tableModel.setValueAt(getTaxedTotal(dblSubtotal), 9, 2);
            //Displays the total calories in the appropriate row, column
            tableModel.setValueAt(intTotalCals, 9, 3);
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        //Opens the main menu
        new frmMainMenu().setVisible(true);
        //Closes this frame
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        //Getting the tableModel of our JTable that can be modified 
        javax.swing.table.TableModel tableModel = tableShoppingCart.getModel();

        //CLEARING FIRST 7 ROWS
        //Loops through all 7 rows (available for use)
        for (int i = 0; i < 7; i++)
        {
            //Loops through all 3 columns (Qty, Cost, calories)
            for (int j = 1; j < 4; j++)
            {
                //Changes their value to null (nothing)
                tableModel.setValueAt(null, i, j);
            }
            //Changes all the names of the items (Item column) to " "
            tableModel.setValueAt(" ", i, 0);
            //Changes all the elements in the array to zereo
            intQuantityArr[i] = 0;
        }
        
        //CLEARING SUBTOTAL AND TOTAL
        //changes the subtotal value on the table to 0
        tableModel.setValueAt(0, 8, 2);
        //Loops through all 3 values in the total row (qty, cost, calorie)
        for (int i = 1; i < 4; i++)
        {
            //Changes the value to 0
            tableModel.setValueAt(0, 9, i);
        }
        
        //CLEARING LABELS AND ITEM
        //Displays a blank label in feedback (resetting)
        lblFeedback.setText("");
        //Displays a blank label (resetting)
        lblPrice.setText("Price: ");
        //Displays a blank label (resetting)
        lblCalorie.setText("Calorie: ");
        
        //Clearing the text in the spinnnerQuantity
        spinnerQuantity.setValue(0);
        //Displaying the default image
        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageDefault.png")));
        
        //Resets the variable that keeps track of the current style to -1 (store)
        intSelectedStyle = -1;
        //removing the selected state from the home radio button
        radioButtonHome.setSelected(false);
        //removing the selected state from the Store radio button        
        radioButtonStore.setSelected(false);
        //Removes all the items in the list model
        listModel.removeAllElements();
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmLunch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmLunch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmLunch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmLunch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmLunch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.ButtonGroup buttonGroupStyle;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblAboutItem;
    private javax.swing.JLabel lblCalorie;
    private javax.swing.JLabel lblFeedback;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblSelection;
    private javax.swing.JLabel lblSelectionInfo;
    private javax.swing.JLabel lblShoppingCart;
    private javax.swing.JLabel lblShoppingCartInfo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JList<String> listLunch;
    private javax.swing.JRadioButton radioButtonHome;
    private javax.swing.JRadioButton radioButtonStore;
    private javax.swing.JSeparator separatorShoppingCart;
    private javax.swing.JSpinner spinnerQuantity;
    private javax.swing.JTable tableShoppingCart;
    // End of variables declaration//GEN-END:variables
}
