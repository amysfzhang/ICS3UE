/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.text.DecimalFormat;//Importing DecimalFormat to help with rounding

/**
 *
 * @author Amy Zhang
 * Date: August 21th, 2023
 * Calculates the calories burnt for different activities
 */
public class frmCaloriesBurnt extends javax.swing.JFrame {
    //Declaring a string array that stores the names of high intensity (vigorous) activities
    final String [] STRVIGOROUSACTIVITYARR = {"Bicycling (22-23 kmph)", "Running (10 kmph)", "Basketball Game", "Swimming (butterfly)", "Rope Jumping"};
    //Declaring a string array that stores the names of moderate intensity activities
    final String [] STRMODERATEACTIVITYARR = {"Vacuuming", "Lawn Mowing", "Badminton (recreational)", "Bicycling (15 kmph)", "Hiking"};
    //Declaring a string array that stores the names of low intensity (light) activities
    final String [] STRLIGHTACTIVITYARR = {"Playing Instrument", "Washing dishes", "Stroll (3 kmph)", "Playing Video Game", "Riding a Bus"};
    
    //Declaring an integer array that stores the met (Metabolic equivalent of task) for each vigorous activity
    final double [] DBLVIGOROUSMETSARR = {10, 9.8, 8, 13.8, 8.8};
    //Declaring an integer array that stores the met (Metabolic equivalent of task) for each moderate activity
    final double [] DBLMODERATEMETSARR = {3.3, 6, 5.5, 4, 6};
    //Declaring an integer array that stores the met (Metabolic equivalent of task) for each light activity
    final double [] DBLLIGHTMETSARR = {2, 1.8, 2, 1, 1.3};
    
    //Declaring a string array that stores the paths to the images of vigorous activities
    final String [] STRVIGOROUSIMAGESARR = {"/imageBikingVigorous.png", "/imageRunningVigorous.png", "/imageBasketball.png", "/imageSwimmingButterfly.png", "/imageJumpRoping.png"};
    //Declaring a string array that stores the paths to the images of moderate activities
    final String [] STRMODERATEIMAGEARR = {"/imageVacuuming.png", "/imageLawnMowing.png", "/imageBadminton.png", "/imageBikingVigorous.png", "/imageHiking.png"};
    //Declaring a string array that stores the paths to the images of light activities
    final String [] STRLIGHTIMAGEARR = {"/imagePlayingInstrument.png", "/imageWashingDishes.png", "/imageStroll.png", "/imagePlayingVideoGame.png", "/imageRidingABus.png"};

    //Declaring an integer araay to store the calories the activities on the table burn (instead of reading the values from the table)
    double [] dblCaloriesArr = {0, 0, 0, 0, 0, 0, 0, 0};
    
    // Declaring a variable to store the intensity that is selected
    //-1 is not set, 0 is vigorous, 1 is moderate, 2 is light
    int intSelectedIntensity = -1;
    //Declaring a variable to store the index of the item in the list that is selected
    //-1 is none selected, 0-7 is the index selected
    int intSelectedActivity = -1;
    
    /**
     * 
     * @param dblMets is a positive number > 0 which is the Metabolic equivalent of task for an activity
     * @param intMinutes is a positive integer > 0 which is the number of minutes the activity is done for
     * @param dblWeight is a positive double > 0 which is the weigh of the user
     * @return a double that is the total calories burnt which is found using a formula (Calories/min = METS X 3.5 X Weight (KG) / 200)
     */
    
    public static double getCaloriesBurnt(double dblMets, int intMinutes, double dblWeight){
        //Calculates the calories burnt and then returns the answer
        return Math.round((intMinutes* dblMets * 3.5 * dblWeight)* 100 /200.00)/100.00;
    }
    
    /**
     * 
     * @param dblArray is an double array with numbers >= 0
     * @return a double that is the sum of all elements in the array
     */
    public static double getArraySum(double [] dblArray){
        //Declares a variable to store the sum of the elements in the array
        double dblSum = 0;
        //Loops through each element in the array
        for (int i = 0; i < dblArray.length; i++)
        {
            //Adds the element to the ongoing total
            dblSum += dblArray[i];
        }    
        //Returns the total at the end
        return dblSum;
    }
    
    /**
     * Creates new form frmBreakfast
     */
    public frmCaloriesBurnt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupIntensity = new javax.swing.ButtonGroup();
        btnAdd = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTotalCalories = new javax.swing.JTable();
        separatorTotalCalories = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        listActivities = new javax.swing.JList<>();
        lblFeedback = new javax.swing.JLabel();
        lblSelection = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblTotalCalories = new javax.swing.JLabel();
        lblSelectionInfo = new javax.swing.JLabel();
        lblAboutActivity = new javax.swing.JLabel();
        radioButtonLight = new javax.swing.JRadioButton();
        radioButtonModerate = new javax.swing.JRadioButton();
        radioButtonVigorous = new javax.swing.JRadioButton();
        lblIntensity = new javax.swing.JLabel();
        txtMinutes = new javax.swing.JTextField();
        lblMinutes = new javax.swing.JLabel();
        lblMet = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        txtWeight = new javax.swing.JTextField();
        lblWeight = new javax.swing.JLabel();
        lblTotalCaloriesInfo = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageDefault.png"))); // NOI18N
        lblImage.setToolTipText("");
        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tableTotalCalories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {" ", null, null},
                {" ", null, null},
                {" ", null, null},
                {" ", null, null},
                {" ", null, null},
                {" ", null, null},
                {" ", null, null},
                {" ", null, null},
                {" ", null, null},
                {"Total",  new Integer(0),  new Double(0.0)}
            },
            new String [] {
                "Activity", "Minutes", "Calorie"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTotalCalories.setShowVerticalLines(true);
        jScrollPane3.setViewportView(tableTotalCalories);
        if (tableTotalCalories.getColumnModel().getColumnCount() > 0) {
            tableTotalCalories.getColumnModel().getColumn(0).setPreferredWidth(175);
        }

        separatorTotalCalories.setOrientation(javax.swing.SwingConstants.VERTICAL);

        listActivities.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listActivities.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listActivitiesValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listActivities);

        lblFeedback.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        lblFeedback.setForeground(new java.awt.Color(255, 0, 51));

        lblSelection.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSelection.setText("Selection");

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle.setText("Calories Burnt per Activity");

        lblTotalCalories.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTotalCalories.setText("Total Calories");

        lblSelectionInfo.setText("Click on the activity to learn more");

        lblAboutActivity.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblAboutActivity.setText("About Activity");

        buttonGroupIntensity.add(radioButtonLight);
        radioButtonLight.setText("Light");
        radioButtonLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonLightActionPerformed(evt);
            }
        });

        buttonGroupIntensity.add(radioButtonModerate);
        radioButtonModerate.setText("Moderate");
        radioButtonModerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonModerateActionPerformed(evt);
            }
        });

        buttonGroupIntensity.add(radioButtonVigorous);
        radioButtonVigorous.setText("Vigorous");
        radioButtonVigorous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonVigorousActionPerformed(evt);
            }
        });

        lblIntensity.setText("Intensity:");

        lblMinutes.setText("Minutes:");

        lblMet.setText("Metabolic equivalent of task: ");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        txtWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeightActionPerformed(evt);
            }
        });

        lblWeight.setText("Your Weight (kg):");

        lblTotalCaloriesInfo.setText("Drag column lines to resize if text is hidden");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(lblSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblIntensity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioButtonVigorous)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioButtonModerate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioButtonLight)
                                        .addGap(29, 29, 29))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblWeight)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(96, 96, 96)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblMet, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(25, 25, 25)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(btnAdd)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(lblMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(txtMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lblAboutActivity)
                                            .addGap(109, 109, 109))))))
                        .addComponent(separatorTotalCalories, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(btnBack))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSelectionInfo))
                                .addGap(45, 45, 45)
                                .addComponent(lblTitle)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lblTotalCaloriesInfo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(lblTotalCalories))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTotalCalories)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTotalCaloriesInfo)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(separatorTotalCalories, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblAboutActivity)
                                                .addGap(26, 26, 26))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblSelection)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(21, 21, 21)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(txtMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(lblMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btnAdd)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(lblFeedback))
                                                    .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblMet, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(radioButtonVigorous)
                                                    .addComponent(radioButtonModerate)
                                                    .addComponent(radioButtonLight)
                                                    .addComponent(lblIntensity))
                                                .addGap(18, 18, 18)
                                                .addComponent(lblSelectionInfo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(1, 1, 1)))))))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Creating a listModel that can be used in each button method to display in listBreakfast
    javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
    
    private void listActivitiesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listActivitiesValueChanged
        //Declaring the decimal format to be two places
        DecimalFormat df1 = new DecimalFormat("0.0");
        //Getting the index of the activity selected on the list and storing it in intSelectedActivity
        intSelectedActivity = listActivities.getSelectedIndex();
        
        //Checks if there is an activity selected (-1 = no activity selected)
        if (intSelectedActivity != -1)
        {
            //Swtiches directly to two different cases depending on the intensity that was selected (0 = vigorous, 1 = moderate, 2 = light)
            switch(intSelectedIntensity)
            {   
                //Runs where the style selected is Vigorous
                case 0:
                    //Displays the image to the appropriate one for the activity selected (getClass gets a unique class for the image)
                    lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(STRVIGOROUSIMAGESARR[intSelectedActivity])));
                    //Displays the price of the item rounded to two decimal places
                    lblMet.setText("Metabolic equivalent of task: " + df1.format(DBLVIGOROUSMETSARR[intSelectedActivity]));
                    break;//Ends, avoid fall-through
                
                //Runs where the style selected is Moderate
                case 1:
                    //Displays the image to the appropriate one for the activity selected (getClass gets a unique class for the image)
                    lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(STRMODERATEIMAGEARR[intSelectedActivity])));
                    //Displays the price of the item rounded to two decimal places
                    lblMet.setText("Metabolic equivalent of task: " + df1.format(DBLMODERATEMETSARR[intSelectedActivity]));
                    break;//Ends, avoid fall-through
                    
                //Runs where the style selected is Light
                case 2:
                    //Displays the image to the appropriate one for the activity selected (getClass gets a unique class for the image)
                    lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(STRLIGHTIMAGEARR[intSelectedActivity])));
                    //Displays the price of the item rounded to two decimal places
                    lblMet.setText("Metabolic equivalent of task: " + df1.format(DBLLIGHTMETSARR[intSelectedActivity]));
                    break;//Ends, avoid fall-through
            }
        }


    }//GEN-LAST:event_listActivitiesValueChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //Displaying an empty string to clear any errors previously raised
        lblFeedback.setText("");
        
        //Getting the tableModel of our JTable that can be modified 
        javax.swing.table.TableModel tableModel = tableTotalCalories.getModel();
        //Reading the value inside the minutes textbox and storing it in a string (any value can be stringed)
        String strMinutes = txtMinutes.getText();
        //Reading the value inside the weight textbox and storing it in a string (any value can be stringed)
        String strWeight = txtWeight.getText();
        //Declaring a variable to store the minutes after being converted to an integer
        int intMinutesAdded = 0;
        //Declaring a variable to store the weight after being converted to a double
        double dblWeight = 0;
        //Declaring a boolean variable to store whether or not the input is an integer
        boolean isErrorRaised = false;
        
        //FIRST VALIDATION: checking if all fields were entered
        //Checks if an item is selected from the list (-1 = no activity selected)
        if (listActivities.getSelectedIndex() == -1)
        {
            //Displays a error message to the user informing them that no activity has been selected
            lblFeedback.setText("No activity selected");
            //Sets the value of an error raised to true, other parts will not run
            isErrorRaised = true;
        }
        //Checks if the weight texbox is filled out
        else if (strWeight.equals(""))
        {
            //Displays a error message to the user informing them that no weight has been entered
            lblFeedback.setText("No weight entered");
            //Sets the value of an error raised to true, other parts will not run
            isErrorRaised = true;
        }
        //Checks if the minutes textbox is filled out
        else if (strMinutes.equals(""))
        {
            //Displays a error message to the user informing them that no weight has been entered
            lblFeedback.setText("No minutes entered");
            //Sets the value of an error raised to true, other parts will not run
            isErrorRaised = true;
        }
        //If all fields are filled out
        else
        {
            //Store the index of the activity selected in a variable
            intSelectedActivity = listActivities.getSelectedIndex();
        }
        
        
        //SECOND VALIDATION: checking if all the values entered are valid inputs
        //Only runs if no error was raised beforehand
        if(!isErrorRaised){
            //Checks the weight given is an integer
            try
            {
                //tries to convert the string into an integer
                dblWeight = Double.parseDouble(strWeight);
                
                //Checks if the weight is bigger than 0 (positive integer)
                if(dblWeight <= 0)
                {
                    //Displays a error message to the user informing them that the the weight is either 0 or negative 
                    lblFeedback.setText("Weight not positive number");
                    //Sets the value of an error raised to true, other parts will not run
                    isErrorRaised = true;
                }
            }
            //Catches the error if the input is not an integer
            catch(NumberFormatException e)
            {
                //Displays a error message to the user informing them that the weight was not an integer
                lblFeedback.setText("Weight is a string, not an number");
                //Sets the value of an error raised to true, other parts will not run
                isErrorRaised = true;
            }
            
            //Checks the minutes given is an integer
            try
            {
                //tries to convert the string into an integer
                intMinutesAdded = Integer.parseInt(strMinutes);
                
                //Checks if the minutes is bigger than 0 (positive integer)
                if(intMinutesAdded <= 0)
                {
                    //Displays a error message to the user informing them that the the minutes is either 0 or negative 
                    lblFeedback.setText("Minutes not positive");
                    //Sets the value of an error raised to true, other parts will not run
                    isErrorRaised = true;
                }
            }
            //Catches the error if the input is not an integer
            catch(NumberFormatException e)
            {
                //Displays a error message to the user informing them that the minutes was not an integer
                lblFeedback.setText("Minutes is a string, not an number");
                //Sets the value of an error raised to true, other parts will not run
                isErrorRaised = true;
            }
        }
        
        
        //THIRD VALIDATION: checking for a repeat row/available row
        //Decalring a variable to know when a reapeat/avaiable row has been found
        boolean isItemRepeat = false, isRowEmpty = false;
        //Declaring a variabel to keep track of which row the item is added to
        int intSelectedRow = 0;
        //Declaring a variable to store the total minutes of an activity = (additional + original)
        int intActivityMinutes = intMinutesAdded;
        
        //only runs if no errors were raised beforehand
        if (!isErrorRaised)
        { 
            //Goes through each row (8 total) in the table until either there is a row with the same activity or new row available
            while (!isItemRepeat && !isRowEmpty && intSelectedRow < 8){
                //Checks if the item of the row is equal to the activity selected in the Jlist
                if (tableModel.getValueAt(intSelectedRow, 0).equals(listActivities.getSelectedValue()))
                {
                    //There is a row that has the same activity, stops the while loop
                    isItemRepeat = true;
                }
                //Checks if the row in the table model is empty
                else if (tableModel.getValueAt(intSelectedRow, 0).equals(" "))
                {
                    //There is a row available, stops the while loop
                    isRowEmpty = true;
                }
                //If the row is not the same item and not empty
                else
                {    
                    //Increases the row counter by 1, keep looking
                    intSelectedRow++;
                }
            }
            
            //Runs if no rows are available
            if (!isRowEmpty && !isItemRepeat)
            {
                //Displays a error message to the user informing them that no rows available
                lblFeedback.setText("Max 8, no rows available");
                //Sets the value of an error raised to true, other parts will not run
                isErrorRaised = true;
            }
            //Runs if the item is repeated
            else if (isItemRepeat)
            {   
                //Adds the original minute count in the table of the activity to the new amount
                intActivityMinutes += (int) tableModel.getValueAt(intSelectedRow, 1);
                               
            }
        }

        
        //DISPLAYING IN TABLE
        //Declaring a variable to store the total amount of calories
        double dblTotalCals = 0;
        
        //Only runs if no errors are produced beforhand
        if (!isErrorRaised)
        {        
            //Switches directly depending on the intensity 
            switch(intSelectedIntensity)
            {
                //Runs if the Intensity is vigorous
                case 0:
                    //Calls function to calculate calories burnt and adds to the activity total
                    dblCaloriesArr[intSelectedRow] += getCaloriesBurnt(DBLVIGOROUSMETSARR[intSelectedActivity], intActivityMinutes, dblWeight);
                    //Displays the name of the activity in the first column
                    tableModel.setValueAt(STRVIGOROUSACTIVITYARR[intSelectedActivity], intSelectedRow, 0);
                    //Displays the quantity of the activity in the second column
                    tableModel.setValueAt(intActivityMinutes, intSelectedRow, 1);

                    //Store the total Calories as the quantity added multiplied by the activity's calorie and added to the current total on the table
                    dblTotalCals = getArraySum(dblCaloriesArr);
                    break;//Ends, avoid fall-through
                
                // Runs if the Intensity is moderate
                case 1:
                    //Calls function to calculate calories burnt and adds to the activity total
                    dblCaloriesArr[intSelectedRow] += getCaloriesBurnt(DBLMODERATEMETSARR[intSelectedActivity], intActivityMinutes, dblWeight);
                    //Displays the name of the activity in the first column                
                    tableModel.setValueAt(STRMODERATEACTIVITYARR[intSelectedActivity], intSelectedRow, 0);
                    //Displays the quantity of the activity in the second column
                    tableModel.setValueAt(intActivityMinutes, intSelectedRow, 1);

                    //Store the total Calories as the quantity added multiplied by the activity's calorie and added to the current total on the table                
                    dblTotalCals = getArraySum(dblCaloriesArr);
                    break;//Ends, avoid fall-through
                
                // Runs if the Intensity is light
                case 2:
                    //Calls function to calculate calories burnt and adds to the activity total
                    dblCaloriesArr[intSelectedRow] += getCaloriesBurnt(DBLLIGHTMETSARR[intSelectedActivity], intActivityMinutes, dblWeight);
                    //Displays the name of the activity in the first column                
                    tableModel.setValueAt(STRLIGHTACTIVITYARR[intSelectedActivity], intSelectedRow, 0);
                    //Displays the quantity of the activity in the second column
                    tableModel.setValueAt(intActivityMinutes, intSelectedRow, 1);

                    //Store the total Calories as the quantity added multiplied by the activity's calorie and added to the current total on the table                
                    dblTotalCals = getArraySum(dblCaloriesArr);
                    break;//Ends, avoid fall-through
            }

            //Displays the activity calorie
            tableModel.setValueAt(dblCaloriesArr[intSelectedRow], intSelectedRow, 2);            
            //Calls the method getArraySum and displays the sum of the total quantities in the table
            tableModel.setValueAt(intMinutesAdded + (int)tableModel.getValueAt(9, 1), 9, 1);
            //Displays the total calories in the appropriate row, column
            tableModel.setValueAt(dblTotalCals, 9, 2);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void radioButtonLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonLightActionPerformed
       //Sets the variable that keeps track of the current style to 2
        intSelectedIntensity = 2;
        
        //Removes all the activity in the list model
        listModel.removeAllElements();
        //loops through each item in STRLIGHTACTIVITYARR which contains all the names of the vigorous activities
        for (int i = 0; i < STRLIGHTACTIVITYARR.length; i++)
        {
            //adds the element (name of activity) in a new row            
            listModel.addElement(STRLIGHTACTIVITYARR[i]);
        }
        //Displays the listmodel in the Jlist listActivities
        listActivities.setModel(listModel);
    }//GEN-LAST:event_radioButtonLightActionPerformed

    private void radioButtonModerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonModerateActionPerformed
       //Sets the variable that keeps track of the current style to 1 
        intSelectedIntensity = 1;
        
        //Removes all the items in the list model
        listModel.removeAllElements();
        //loops through each item in STRMODERATEACTIVITYARR which contains all the names of the moderate activities
        for (int i = 0; i < STRMODERATEACTIVITYARR.length; i++)
        {
            //adds the element (name of activity) in a new row            
            listModel.addElement(STRMODERATEACTIVITYARR[i]);
        }
        //Displays the listmodel in the Jlist listActivities
        listActivities.setModel(listModel);
    }//GEN-LAST:event_radioButtonModerateActionPerformed

    private void radioButtonVigorousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonVigorousActionPerformed
        //Sets the variable that keeps track of the current style to 0 
        intSelectedIntensity = 0;

        //Removes all the items in the list model
        listModel.removeAllElements();
        //loops through each item in STRVIGOROUSACTIVITYARR which contains all the names of the light activities
        for (int i = 0; i < STRVIGOROUSACTIVITYARR.length; i++)
        {
            //adds the element (name of activity) in a new row
            listModel.insertElementAt(STRVIGOROUSACTIVITYARR[i], i);
        }
        //Displays the listmodel in the Jlist listActivities
        listActivities.setModel(listModel);
    }//GEN-LAST:event_radioButtonVigorousActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        //Opens the main menu
        new frmMainMenu().setVisible(true);
        //Closes this frame
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        //Getting the tableModel of our JTable that can be modified 
        javax.swing.table.TableModel tableModel = tableTotalCalories.getModel();

        //CLEARING FIRST 8 ROWS
        //Loops through all 8 rows (available for use)
        for (int i = 0; i < 8; i++)
        {
            //Loops through all 2 columns (minutes, calories)
            for (int j = 1; j < 3; j++)
            {
                //Changes their value to null (nothing)
                tableModel.setValueAt(null, i, j);
            }
            //Changes all the names of the activities (Item column) to " "
            tableModel.setValueAt(" ", i, 0);
            //Changes all the elements in the array to zereo
            dblCaloriesArr[i] = 0;
        }
        
        //CLEARING TOTAL
        //Loops through all 2 values in the total row (minutes, calorie)
        for (int i = 1; i < 3; i++)
        {
            //Changes the value to 0
            tableModel.setValueAt(0, 9, i);
        }
        
        //CLEARING LABELS AND ITEM
        //Displays a blank label in feedback (resetting)
        lblFeedback.setText("");
        //Displays a blank label (resetting)
        lblMet.setText("Price: ");
        //Displaying the default image
        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageDefault.png")));
        
        //Clears the minute textbox
        txtMinutes.setText("");
        //Clears the weight textbox
        txtWeight.setText("");
        
        //Resets the variable that keeps track of the current Intensity to -1 (store)
        intSelectedIntensity = -1;
        //removing the selected state from the Vigorous radio button
        radioButtonVigorous.setSelected(false);
        //removing the selected state from the Moderate radio button        
        radioButtonModerate.setSelected(false);
        //removing the selected state from the Light radio button        
        radioButtonLight.setSelected(false);
        //Removes all the items in the list model
        listModel.removeAllElements();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmBreakfast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmBreakfast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmBreakfast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmBreakfast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCaloriesBurnt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.ButtonGroup buttonGroupIntensity;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAboutActivity;
    private javax.swing.JLabel lblFeedback;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblIntensity;
    private javax.swing.JLabel lblMet;
    private javax.swing.JLabel lblMinutes;
    private javax.swing.JLabel lblSelection;
    private javax.swing.JLabel lblSelectionInfo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalCalories;
    private javax.swing.JLabel lblTotalCaloriesInfo;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JList<String> listActivities;
    private javax.swing.JRadioButton radioButtonLight;
    private javax.swing.JRadioButton radioButtonModerate;
    private javax.swing.JRadioButton radioButtonVigorous;
    private javax.swing.JSeparator separatorTotalCalories;
    private javax.swing.JTable tableTotalCalories;
    private javax.swing.JTextField txtMinutes;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
